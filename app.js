// Update generatePDFReport and PDF library check
const originalGeneratePDF = TaskManager.prototype.generatePDFReport;
TaskManager.prototype.generatePDFReport = function () {
    // Ensure jsPDF is loaded correctly from window.jspdf.jsPDF
    if (!window.jspdf || !window.jspdf.jsPDF) {
        this.showAlert('PDF library not loaded. Please refresh the page.', 'danger');
        return;
    }

    const { jsPDF } = window.jspdf;
    const reportType = document.getElementById('reportType').value;
    const dateRange = document.getElementById('reportDateRange').value;
    const doc = new jsPDF();

    doc.setFontSize(18);
    doc.text(this.appConfig.company_info.name, 20, 20);
    doc.setFontSize(14);
    doc.text(`${this.getReportTitle(reportType)} - ${this.formatDateRange(dateRange)}`, 20, 30);
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 40);
    doc.text(`Generated by: ${this.currentUser.username}`, 20, 45);

    let yPosition = 60;
    switch (reportType) {
        case 'team-summary':
            yPosition = this.generateTeamSummaryReport(doc, yPosition, dateRange);
            break;
        case 'task-completion':
            yPosition = this.generateTaskCompletionReport(doc, yPosition, dateRange);
            break;
        case 'user-productivity':
            yPosition = this.generateUserProductivityReport(doc, yPosition, dateRange);
            break;
        case 'project-timeline':
            yPosition = this.generateProjectTimelineReport(doc, yPosition, dateRange);
            break;
        case 'admin-overview':
            yPosition = this.generateAdminOverviewReport(doc, yPosition, dateRange);
            break;
    }

    doc.save(`${reportType}-${dateRange}-${new Date().toISOString().split('T')[0]}.pdf`);
    this.showAlert('PDF report generated successfully!', 'success');
};

// Patch TaskManager class constructor to bind new method
